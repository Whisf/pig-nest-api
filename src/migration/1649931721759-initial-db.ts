import {MigrationInterface, QueryRunner} from "typeorm";

export class initialDb1649931721759 implements MigrationInterface {
    name = 'initialDb1649931721759'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE \`user_closure\` (\`acestorid\` int NOT NULL, \`descendantid\` int NOT NULL, INDEX \`IDX_b07202035ba56db5d12cc173c8\` (\`acestorid\`), INDEX \`IDX_1a9cb93b3b433d77f8306d3fda\` (\`descendantid\`), PRIMARY KEY (\`acestorid\`, \`descendantid\`)) ENGINE=InnoDB`);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`account_locked\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Alter_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Alter_routine_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`authentication_string\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Create_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Create_role_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Create_routine_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Create_tablespace_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Create_tmp_table_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Create_user_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Create_view_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Delete_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Drop_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Drop_role_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Event_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Execute_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`File_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Grant_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP PRIMARY KEY`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD PRIMARY KEY (\`User\`)`);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Host\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Index_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Insert_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Lock_tables_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`max_connections\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`max_questions\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`max_updates\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`max_user_connections\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`password_expired\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`password_last_changed\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`password_lifetime\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Password_require_current\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Password_reuse_history\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Password_reuse_time\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`plugin\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Process_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`References_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Reload_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Repl_client_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Repl_slave_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Select_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Show_db_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Show_view_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Shutdown_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`ssl_cipher\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`ssl_type\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Super_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Trigger_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`Update_priv\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP PRIMARY KEY`);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`User\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`User_attributes\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`x509_issuer\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`x509_subject\``);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`id\` int NOT NULL PRIMARY KEY AUTO_INCREMENT`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`createAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`updateAt\` timestamp(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6)`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`username\` varchar(255) NOT NULL`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`isAvaiable\` tinyint NOT NULL`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`parentId\` int NULL`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD CONSTRAINT \`FK_c86f56da7bb30c073e3cbed4e50\` FOREIGN KEY (\`parentId\`) REFERENCES \`user\`(\`id\`) ON DELETE SET NULL ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`user_closure\` ADD CONSTRAINT \`FK_b07202035ba56db5d12cc173c89\` FOREIGN KEY (\`acestorid\`) REFERENCES \`user\`(\`id\`) ON DELETE CASCADE ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE \`user_closure\` ADD CONSTRAINT \`FK_1a9cb93b3b433d77f8306d3fda1\` FOREIGN KEY (\`descendantid\`) REFERENCES \`user\`(\`id\`) ON DELETE CASCADE ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE \`user_closure\` DROP FOREIGN KEY \`FK_1a9cb93b3b433d77f8306d3fda1\``);
        await queryRunner.query(`ALTER TABLE \`user_closure\` DROP FOREIGN KEY \`FK_b07202035ba56db5d12cc173c89\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP FOREIGN KEY \`FK_c86f56da7bb30c073e3cbed4e50\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`parentId\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`isAvaiable\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`username\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`updateAt\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`createAt\``);
        await queryRunner.query(`ALTER TABLE \`user\` DROP COLUMN \`id\``);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`x509_subject\` blob NOT NULL`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`x509_issuer\` blob NOT NULL`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`User_attributes\` json NULL`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`User\` char(32) CHARACTER SET "utf8" COLLATE "utf8_bin" NOT NULL DEFAULT ''`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD PRIMARY KEY (\`User\`)`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Update_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Trigger_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Super_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`ssl_type\` enum ('', 'ANY', 'X509', 'SPECIFIED') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT ''`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`ssl_cipher\` blob NOT NULL`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Shutdown_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Show_view_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Show_db_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Select_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Repl_slave_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Repl_client_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Reload_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`References_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Process_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`plugin\` char(64) CHARACTER SET "utf8" COLLATE "utf8_bin" NOT NULL DEFAULT 'caching_sha2_password'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Password_reuse_time\` smallint UNSIGNED NULL`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Password_reuse_history\` smallint UNSIGNED NULL`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Password_require_current\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NULL`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`password_lifetime\` smallint UNSIGNED NULL`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`password_last_changed\` timestamp NULL`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`password_expired\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`max_user_connections\` int UNSIGNED NOT NULL DEFAULT '0'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`max_updates\` int UNSIGNED NOT NULL DEFAULT '0'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`max_questions\` int UNSIGNED NOT NULL DEFAULT '0'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`max_connections\` int UNSIGNED NOT NULL DEFAULT '0'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Lock_tables_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Insert_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Index_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Host\` char(255) CHARACTER SET "ascii" COLLATE "ascii_general_ci" NOT NULL DEFAULT ''`);
        await queryRunner.query(`ALTER TABLE \`user\` DROP PRIMARY KEY`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD PRIMARY KEY (\`Host\`, \`User\`)`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Grant_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`File_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Execute_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Event_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Drop_role_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Drop_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Delete_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Create_view_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Create_user_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Create_tmp_table_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Create_tablespace_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Create_routine_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Create_role_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Create_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`authentication_string\` text CHARACTER SET "utf8" COLLATE "utf8_bin" NULL`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Alter_routine_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`Alter_priv\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`ALTER TABLE \`user\` ADD \`account_locked\` enum ('N', 'Y') CHARACTER SET "utf8" COLLATE "utf8_general_ci" NOT NULL DEFAULT 'N'`);
        await queryRunner.query(`DROP INDEX \`IDX_1a9cb93b3b433d77f8306d3fda\` ON \`user_closure\``);
        await queryRunner.query(`DROP INDEX \`IDX_b07202035ba56db5d12cc173c8\` ON \`user_closure\``);
        await queryRunner.query(`DROP TABLE \`user_closure\``);
    }

}
